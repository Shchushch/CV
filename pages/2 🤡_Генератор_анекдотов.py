import streamlit as st
from transformers import GPT2Tokenizer, GPT2LMHeadModel
import torch


DEVICE = 'cpu'


st.set_page_config(
    page_title="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∞–Ω–µ–∫–¥–æ—Ç–æ–≤",
    page_icon="ü§°",
    layout="wide",
)
st.title('–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∞–Ω–µ–∫–¥–æ—Ç–æ–≤')

@st.cache_resource
def load_model():
    model = GPT2LMHeadModel.from_pretrained(
        'sberbank-ai/rugpt3small_based_on_gpt2',
        output_attentions = False,
        output_hidden_states = False,
    )

    # –í–µ—à–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∫–∏ –≤–µ—Å–æ–≤ –Ω–∞ –Ω–∞—à—É –º–æ–¥–µ–ª—å
    model.load_state_dict(torch.load('assets/aneks_model.pt',map_location=DEVICE))
    return model.to(DEVICE)
model = load_model()
with st.expander("–ü–æ—è—Å–Ω–µ–Ω–∏—è"):
    """
    #### –≠—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∞–Ω–µ–∫–¥–æ—Ç–æ–≤

    –ù–µ–º–Ω–æ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:
    –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å –º–æ–¥–µ–ª—å **rugp3small_based_on_gpt2** –æ–±—É—á–µ–Ω–Ω–∞—è –°–±–µ—Ä–æ–º. –Ø –¥–æ–æ–±—É—á–∏–ª –µ—ë –Ω–∞ –¥–∞—Ç–∞—Å–µ—Ç–µ –∏–∑ 2220 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ë.
    –ö—Ä–æ–º–µ —Ç–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –∑–∞–¥–∞–Ω—ã do_sample=True, early_stopping=True, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –æ—Å—Ç–∞–≤–∏–ª –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º, —Ç.–∫. —ç—Ç–æ –ø—Ä–∏–≤–µ–ª–æ –º–µ–Ω—è –∫ –ª—É—á—à–µ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    """

# –í–µ—à–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–µ—Å–∞ –Ω–∞ –Ω–∞—à—É –º–æ–¥–µ–ª—å
#model.load_state_dict(torch.load('resources/model.pt',map_location=DEVICE))
model_name='sberbank-ai/rugpt3small_based_on_gpt2'
tokenizer = GPT2Tokenizer.from_pretrained(model_name)
tokenizer.pad_token_id = tokenizer.eos_token_id

input=st.text_area('–í–≤–µ–¥–∏ –ø—Ä–æ–º—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–µ–∫–∞',value="–ó–∞—Ö–æ–¥–∏—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ —á–∏—Å–ª–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–≤ –≤ –±–∞—Ä", key='input')
num_aneks= st.number_input('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–µ–∫–æ–≤',min_value=1,max_value=5,value=3)

token_nums= st.number_input('–ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤ –≤—ã–≤–æ–¥–∞',min_value=1,max_value=500,value=200)
with st.expander("–ê —á—Ç–æ —Ç–∞–∫–æ–µ —Ç–æ–∫–µ–Ω?"):
    """
    –¢–æ–∫–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ (Natural Language Processing, NLP) - —ç—Ç–æ –∫—É—Å–æ—á–µ–∫ —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –±–æ–ª—å—à–µ–≥–æ —Ç–µ–∫—Å—Ç–∞. –¢–æ–∫–µ–Ω—ã –º–æ–≥—É—Ç –±—ã—Ç—å –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º, –∏–ª–∏ –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–º–∏, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—è —Å–æ–±–æ–π —Ü–µ–ª–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –¥–∞–∂–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤.

    –î–∞–≤–∞–π—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤:

    1. –í —Å–ª–æ–≤–µ "–∫–æ—à–∫–∞" –µ—Å—Ç—å 6 —Å–∏–º–≤–æ–ª–æ–≤, –∏ –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª –º–æ–∂–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è —Ç–æ–∫–µ–Ω–æ–º (–∫, –æ, —à, –∫, –∞).

    2. –í –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ "–Ø –ª—é–±–ª—é –∫–æ—à–µ–∫" —Ç–æ–∫–µ–Ω–∞–º–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ: "–Ø", "–ª—é–±–ª—é", "–∫–æ—à–µ–∫".

    3. –í —Å–ª—É—á–∞–µ —Ä–∞–±–æ—Ç—ã —Å –±—É–∫–≤–∞–º–∏, –∫–∞–∂–¥–∞—è –±—É–∫–≤–∞ –º–æ–∂–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è —Ç–æ–∫–µ–Ω–æ–º. –ù–∞–ø—Ä–∏–º–µ—Ä, –≤ —Å–ª–æ–≤–µ "HELLO" –±—É–¥—É—Ç –ø—è—Ç—å —Ç–æ–∫–µ–Ω–æ–≤: "H", "E", "L", "L", "O".

    –ö–æ–≥–¥–∞ –º—ã –≥–æ–≤–æ—Ä–∏–º –æ —Ç–æ–∫–µ–Ω–∞—Ö –≤ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç—è—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞, –º—ã —á–∞—Å—Ç–æ –∏–º–µ–µ–º –≤ –≤–∏–¥—É –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –º–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç. –í —Ç–µ–∫—Å—Ç–µ –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Å–∏–º–≤–æ–ª –æ–±—ã—á–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è –≤ —á–∏—Å–ª–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ, –Ω–∞–∑—ã–≤–∞–µ–º–æ–µ —Ç–æ–∫–µ–Ω–æ–º, —á—Ç–æ–±—ã –º–æ–¥–µ–ª—å –º–æ–≥–ª–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

    –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ —Ç–æ–∫–µ–Ω–æ–º —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å–ª–æ–≤–æ –∏–ª–∏ –∑–Ω–∞–∫ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è, –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    """

length=st.number_input('–ù–∞–∫–∞–∑–∞–Ω–∏–µ –∑–∞ –¥–ª–∏–Ω—É',min_value=0.0,max_value=10.0,value=0.2)
with st.expander("–ê –∫–∞–∫ —ç—Ç–æ?"):
    """
    –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —à—Ç—Ä–∞—Ñ–∞ –∑–∞ –¥–ª–∏–Ω—É, –∫–æ—Ç–æ—Ä—ã–π —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ–º –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö –∏–ª–∏ –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤. –ó–Ω–∞—á–µ–Ω–∏–µ length_penalty < 1.0 –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ > 1.0 –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã.
    –û–±—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è length_penalty –º–æ–≥—É—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è –æ—Ç 0.0 –¥–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏. –†–∞–∑–ª–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–æ–≥—É—Ç –æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–∞–∑–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
    - length_penalty = 1.0: –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞ –≤—ã–±–æ—Ä –¥–ª–∏–Ω—ã –æ—Ç–≤–µ—Ç–∞.
    - length_penalty < 1.0: –ú–æ–¥–µ–ª—å –±—É–¥–µ—Ç –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—Ç—å –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã.
    - length_penalty > 1.0: –ú–æ–¥–µ–ª—å –±—É–¥–µ—Ç –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—Ç—å –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã.
    """

temp_num=st.number_input('–í–≤–æ–¥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã',min_value=0.1,max_value=5.0,value=0.5)
with st.expander("–ê —ç—Ç–æ —á—Ç–æ —Ç–∞–∫–æ–µ?"):
    """
    –ö–æ–≥–¥–∞ –º—ã –≥–æ–≤–æ—Ä–∏–º –æ "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ" –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π, —Ç–∞–∫–∏—Ö –∫–∞–∫ GPT, —ç—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –ø–∞—Ä–∞–º–µ—Ç—Ä—É, –∫–æ—Ç–æ—Ä—ã–π –≤–ª–∏—è–µ—Ç –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –º–æ–¥–µ–ª–∏.

    –ü—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ "—Å—É–º–∞—Å—à–µ–¥—à–∏–µ" –∏–ª–∏ "–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–µ" –±—É–¥—É—Ç –æ—Ç–≤–µ—Ç—ã. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å —ç—Ç–æ –∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫—É, –∫–æ—Ç–æ—Ä–∞—è —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏ –º–æ–¥–µ–ª–∏.

    - **–í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.5):**
    - –ë–æ–ª—å—à–∞—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –≤ –æ—Ç–≤–µ—Ç–∞—Ö.
    - –ú–æ–¥–µ–ª—å –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã.
    - –û—Ç–≤–µ—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –º–µ–Ω–µ–µ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º.

    - **–ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.5):**
    - –ú–µ–Ω—å—à–∞—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å, –±–æ–ª–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–µ –æ—Ç–≤–µ—Ç—ã.
    - –ú–æ–¥–µ–ª—å —Å–∫–ª–æ–Ω–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —Ç–∏–ø–∏—á–Ω—ã–µ –∏ "–æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ" —Ñ—Ä–∞–∑—ã.
    - –û—Ç–≤–µ—Ç—ã –±–æ–ª–µ–µ —Å–≤—è–∑–∞–Ω—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º.

    –ò—Ç–∞–∫, —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –ø–æ–º–æ–≥–∞–µ—Ç –≤–∞–º –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ–º –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –≤ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã—Ö —Ç–µ–∫—Å—Ç–∞—Ö."""

def generator(prompt, max_new_tokens=token_nums, temperature=temp_num, num_aneks=num_aneks,length_penalty=length):
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è model, tokenizer –∏ DEVICE

    prompt = tokenizer.encode(prompt, return_tensors='pt', truncation=True).to(DEVICE)

    aneks = model.generate(
        input_ids=prompt,
        do_sample=True,
        temperature=temperature,

        num_return_sequences=num_aneks,
        max_length=max_new_tokens,
        length_penalty=length_penalty,
        early_stopping=True
    ).cpu().numpy()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
    out_list = [tokenizer.decode(seq, skip_special_tokens=True).split("\n")[0] for seq in aneks]

    return out_list

if "generated_text" not in st.session_state:
    st.session_state.generated_text = ""
if "disabled" not in st.session_state:
    st.session_state.disabled = False

def show_anekdot_generator():
    rad= st.empty()
    butt= st.empty()
    
    age_confirmation = rad.radio("–í–∞–º –µ—Å—Ç—å 18 –ª–µ—Ç?", ("–î–∞", "–ù–µ—Ç"))
    
    submit =butt.button("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
    
    if submit:
        if age_confirmation == "–î–∞":
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª, —á—Ç–æ –µ–º—É 18
            st.session_state.disabled = True
            

        elif age_confirmation == "–ù–µ—Ç":
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª "–ù–µ—Ç"
            
            st.write("–í—ã –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ 18 –ª–µ—Ç. –í–∞—Å –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–æ–≤—ã–≤–∞—é—Ç...")
            st.markdown('<meta http-equiv="refresh" content="0;URL=\'https://www.youtube.com/watch?v=V8Er1uk4fcw\'" />', unsafe_allow_html=True)
        rad.empty() 
        butt.empty()
        
if not st.session_state.disabled:
    show_anekdot_generator()
if st.session_state.disabled:
    generate_anek_button = st.button("–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–µ–∫",key='gen')


    if st.session_state.gen:
        st.session_state.generated_text = ""
        out= generator(input)
        for out_ in out:
            st.session_state.generated_text += out_+'\n\n'

        st.session_state.generated_text


